<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>未分类 on 博客</title>
    <link>blog.kquark.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/</link>
    <description>Recent content in 未分类 on 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2022 &lt;a href=&#34;https://blog.kquark.com/&#34;&gt;Eli&lt;/a&gt;
</copyright>
    <lastBuildDate>Sun, 04 Jul 2021 08:46:07 +0000</lastBuildDate><atom:link href="blog.kquark.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>容器(Docker)自建邮箱poste.io</title>
      <link>blog.kquark.com/post/14/</link>
      <pubDate>Sun, 04 Jul 2021 08:46:07 +0000</pubDate>
      
      <guid>blog.kquark.com/post/14/</guid>
      <description>在若大的互联网，我们都会通过邮箱注册各种各样的账号，但是很多时候只有一个主邮箱有着诸多不便，所以我们希望，最好是一个平台对应一个email，且无限制。
我在找了很多可以私有部署的邮局之后，最终选择了poste.io，只看中了一个点，轻量化部署，1G内存完全足矣，而且部署方便，也就意味着迁移方便。
环境 下面我将在良心云的VPS上面部署，配置如下：
1 Core 1G RAM Ubuntu +宝塔
uname -a Linux VM-*-*-ubuntu 5.4.110-bbrplus #1 SMP Sat Apr 10 01:14:42 CST 2021 x86_64 x86_64 x86_64 GNU/Linux  docker和docker-componse安装请参考Install Docker Engine on CentOS和Install Docker Compose。
运行poste.io  创建poste.io运行目录  $ mkdir -p /www/wwwroot/tools/mail $ cd /www/wwwroot/tools/mail   创建数据存放目录  $ mkdir data   创建docker-compose.yml配置文件  $ nano docker-compose.yml version: &amp;quot;3.3&amp;quot; services: mail: image: analogic/poste.io restart: always hostname: mail.kquark.com ports: - &amp;quot;25:25&amp;quot; - &amp;quot;172.17.0.1:62030:8080&amp;quot; #- &amp;quot;4433:4433&amp;quot; - &amp;quot;110:110&amp;quot; - &amp;quot;143:143&amp;quot; - &amp;quot;465:465&amp;quot; - &amp;quot;587:587&amp;quot; - &amp;quot;993:993&amp;quot; - &amp;quot;995:995&amp;quot; environment: - TZ=Asia/Shanghai - DISABLE_CLAMAV=TRUE - DISABLE_RSPAMD=TRUE - HTTPS=OFF - HTTP_PORT=8080 #- HTTPS_PORT=4433 volumes: - .</description>
    </item>
    
    <item>
      <title>最简单方式实现bing背景获取（php）</title>
      <link>blog.kquark.com/post/13/</link>
      <pubDate>Thu, 01 Jul 2021 17:35:52 +0000</pubDate>
      
      <guid>blog.kquark.com/post/13/</guid>
      <description>测试链接： https://api.kquark.com/bing
https://api.kquark.com/bing/?idx=1&amp;amp;n=1&amp;amp;size=UHD
idx 取值0-8，代表前几天图片，n代表一次获取多少张图片url（暂无用），size代表图片质量部分可取参数如下 size参数：
resolutions: [ &#39;UHD&#39;, &#39;1920x1200&#39;, &#39;1920x1080&#39;, &#39;1366x768&#39;, &#39;1280x768&#39;, &#39;1024x768&#39;, &#39;800x600&#39;, &#39;800x480&#39;, &#39;768x1280&#39;, &#39;720x1280&#39;, &#39;640x480&#39;, &#39;480x800&#39;, &#39;400x240&#39;, &#39;320x240&#39;, &#39;240x320&#39; ]  设计原理依据bing api 获取
https://bing.com/HPImageArchive.aspx?idx=0&amp;amp;n=1  php代码：
&amp;lt;?php $predate = $_GET[&#39;idx&#39;]; $num = $_GET[&#39;n&#39;]; $size = $_GET[&#39;size&#39;]; if(strlen($predate)==0){ $predate=rand(0,8); } if(strlen($num)==0){ $num = 1; } if(strlen($size)==0){ $size = &#39;UHD&#39;; } echo &#39;predate:&#39;.$predate.&#39;&amp;lt;br&amp;gt;&#39;; echo &#39;num:&#39;.$num.&#39;&amp;lt;br&amp;gt;&#39;; echo &#39;size:&#39;.$size.&#39;&amp;lt;br&amp;gt;&#39;; $bingurl=&#39;https://bing.com/HPImageArchive.aspx?idx=&#39;.$predate.&#39;&amp;amp;n=&#39;.$num; //&#39;https://bing.com/HPImageArchive.aspx?idx=0&amp;amp;n=1&#39; echo $bingurl.&#39;&amp;lt;br&amp;gt;&#39;; $str = file_get_contents($bingurl); // 从bing获取数据 if(preg_match(&#39;/&amp;lt;url&amp;gt;([^&amp;lt;]+)&amp;lt;\/url&amp;gt;/isU&#39;, $str, $matches)) { // 正则匹配抓取图片url $imgurl = &#39;http://bing.</description>
    </item>
    
  </channel>
</rss>
