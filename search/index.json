[{"authors":[],"categories":["ai"],"content":"更新中\n欧式距离和马氏距离\n在机器学习中，我们会涉及到距离的度量问题。常用的距离度量有欧式距离和马氏距离。\n欧式距离这边引用\n对于两个形式为[身高,体重]的样本，求这两个样本的欧式距离，如果使用欧式距离，如何理解sqrt(身高^2+体重^2)的含义，另外身高和体重的取值范围并不同，比如[30,100]kg, [100,250]mm，而且易知一般情况下身高和体重是有正相关性的。在二维坐标系上\n欧式距离之前已经接触过，但是统计距离（马氏距离）的理解仍然具有一定的难度。\n从下图易见，若当Q为中心点，如果使用欧式距离，那么QA QD AC等距离是相等的。\n但是从数据散点来直观感觉，从数据的疏密分布中，在统计距离这个度量下可以有个初步的感觉，QC距离比QD更近。\n目前的个人认为，马氏距离实质是将统计数据先进行中心化，旋转，放缩\n","permalink":"/post/25/","series":[],"tags":["ai"],"title":"距离的度量"},{"authors":[],"categories":["Robot"],"content":"对于旋转矩阵，欧拉角，四元数，李群概念进行再次厘清与学习\n更新中, 未完待续\n旋转矩阵 欧拉角 首先需要意识到的一点是欧拉角描述的是变换，而不是运动。所以后文尽量用“变换”而不是“转动”来强调这一区别。\n对于一个物体来说是对于其自身三维笛卡尔坐标系进行旋转。在相同的参数下，在变换中不同轴变换的先后顺序不同，物体的最终姿态一般情况下并不会相同。\n有些地方欧拉角用翻滚，俯仰，偏航(Roll Pitch Yaw, RPY)来表示，可以用飞机的运动来理解。\n为了便于说明，我们设定各轴的旋转角度为[x,y,z]=[10°,10°,0°]，旋转顺序为xyz，那么在旋转过程中，先对物体自身坐标系的x轴进行转动，同时物体自身坐标系也发生了改变，所以y轴需要在新的变换后的轴上进行变换，同理z轴也会被xy轴变换影响。\n在设定好坐标变换顺序后，先变换的坐标轴会对后变换的坐标轴造成影响，而后变换的坐标轴不会对先前变换的坐标轴造成影响。\n一些人可能以为经过[x,y,z]=[10°,10°,0°]，xyz顺序变换后，能直接将通过旋转变换后物体的x轴，从而改为[x,y,z]=[11°,10°,0°]。事实上这是一个新的变换，一切都要从初始状态按轴顺序变换而来。即使有所谓的”连续“，实际上是多次不同的变换的叠加而产生的假象，从而强调欧拉角这是变换而不是运动。要从初始状态按轴顺序变换而来就能很容易解释先变换的坐标轴会对后变换的坐标轴造成影响，反之不会。\n了解了这一概念，从而可以解释万向死锁这一问题，我们可以假设有这一种情况[x,y,z]=[5°,90°,0°]，将y轴变换后，此时z轴会与x轴（x轴并不随后续的yz轴发生变换）重合，这意味着[x,y,z]=[5°,90°,0°]可能与[x,y,z]=[0°,90°,5°]变换结果是一样的，同时意味着物体丢失了一个维度。\n四元数 i j k\n首先需要从复数领域进行\n李群与李空间","permalink":"/post/22/","series":[],"tags":["robot"],"title":"欧拉角，旋转矩阵，四元数，李群"},{"authors":[],"categories":["windows","Linux","cpp"],"content":"Cmake\nWindows 创建新项目 main 函数内容如下\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;windows.h\u0026gt; int main() { std::cout\u0026lt;\u0026lt;\u0026quot;Hello world\u0026quot;\u0026lt;\u0026lt;std::endl; system(\u0026quot;pause\u0026quot;); return 0; } Cmakelists.txt内容如下\ncmake_minimum_required(VERSION 3.5) project(kinematic)#项目名称 # set(CMAKE_BUILD_TYPE Debug) # SET(CMAKE_BUILD_TYPE Release) set(CMAKE_C_STANDARD 11) #编译级别和优化 if(CMAKE_BUILD_TYPE AND (CMAKE_BUILD_TYPE STREQUAL \u0026quot;Debug\u0026quot;)) set(CMAKE_C_FLAGS_DEBUG \u0026quot;${CMAKE_C_FLAGS_DEBUG} -Wall -O0\u0026quot;) message(\u0026quot;Debug mode:${CMAKE_C_FLAGS_DEBUG}\u0026quot;) #add_executable(test_debug ${src_dirs}) elseif(CMAKE_BUILD_TYPE AND (CMAKE_BUILD_TYPE STREQUAL \u0026quot;Release\u0026quot;)) set(CMAKE_C_FLAGS_RELEASE \u0026quot;${CMAKE_C_FLAGS_RELEASE} -Wall -O3\u0026quot;) message(\u0026quot;Release mode:${CMAKE_C_FLAGS_RELEASE}\u0026quot;) #add_executable(test_release ${src_dirs}) else() message(\u0026quot;else:${CMAKE_BUILD_TYPE}\u0026quot;) message(\u0026quot;else:${CMAKE_C_FLAGS_RELEASE}\u0026quot;) #add_executable(test_release ${src_dirs}) endif() # Default to C 11 if(CMAKE_C_STANDARD) set(CMAKE_C_STANDARD 11) endif() # Default to C++14 if(NOT CMAKE_CXX_STANDARD) set(CMAKE_CXX_STANDARD 14) #set(CMAKE_CXX_STANDARD 17) set(CMAKE_CXX_STANDARD_REQUIRED ON) endif() #检查安全性 if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \u0026quot;Clang\u0026quot;) add_compile_options(-Wall -Wextra -Wpedantic) endif() #系统检测，备用 if(WIN32) endif() if(UNIX AND NOT APPLE AND NOT ANDROID) endif() if(APPLE) endif() #库路径 include_directories(include) #源代码路径 aux_source_directory(src SRC_SUB) aux_source_directory(. SRC_CUR)\tMESSAGE(STATUS \u0026quot;message\u0026quot; ${HELLO_BINARY_DIR})#输出一下 #可执行文件 add_executable(kinematic ${SRC_SUB} ${SRC_CUR}) 打开vscode\n选择Cmake Configure\n该操作实质等同于：\nmkdir build cd build cmake -G \u0026quot;MinGW Makefiles\u0026quot; ../ 如果正常的话当前目录下会多个build文件夹\ncd 进入 build文件夹，输入\ncmake . mingw32-make.exe 完成编译。\nvscode调试cmake 在工作空间的.vscode文件夹下，创建launch.json和tasks.json\n参考如下：\nlaunch.json\n{ // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 \u0026quot;version\u0026quot;: \u0026quot;0.2.0\u0026quot;, \u0026quot;configurations\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;g++.exe build and debug active file\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;cppdbg\u0026quot;, \u0026quot;request\u0026quot;: \u0026quot;launch\u0026quot;, \u0026quot;program\u0026quot;: \u0026quot;${workspaceFolder}\\\\build\\\\kinematic.exe\u0026quot;,//需要改成自己的可执行文件 \u0026quot;args\u0026quot;: [], \u0026quot;stopAtEntry\u0026quot;: false, \u0026quot;cwd\u0026quot;: \u0026quot;${workspaceFolder}\u0026quot;, \u0026quot;environment\u0026quot;: [], \u0026quot;externalConsole\u0026quot;: true, \u0026quot;MIMode\u0026quot;: \u0026quot;gdb\u0026quot;, \u0026quot;miDebuggerPath\u0026quot;: \u0026quot;C:\\\\Program Files\\\\mingw64\\\\bin\\\\gdb.exe\u0026quot;, \u0026quot;setupCommands\u0026quot;: [ { \u0026quot;description\u0026quot;: \u0026quot;为 gdb 启用整齐打印\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;-enable-pretty-printing\u0026quot;, \u0026quot;ignoreFailures\u0026quot;: true } ], //需要与task.json的label名称对应 \u0026quot;preLaunchTask\u0026quot;: \u0026quot;Build my project\u0026quot; } ] } program: 要调试的可执行程序的路径，里边可以使用一些宏，宏的外部加 ${} 表示取值 ${fileDirname}：文件目录的名字，launch.json 对应的目录名就是 .vscode ${fileBasenameNoExtension}：不带扩展名的文件名，文件名是 main 函数对应的那个文件 ${workspaceFolder}：工作区目录 preLaunchTask：调试项目前要执行的任务，C/C++: g++.exe 生成活动文件是 tasks.json 中的一个任务 tasks.json\n{ \u0026quot;version\u0026quot;: \u0026quot;2.0.0\u0026quot;, \u0026quot;options\u0026quot;: { \u0026quot;cwd\u0026quot;: \u0026quot;${workspaceFolder}/build/\u0026quot; //进入build目录 }, \u0026quot;tasks\u0026quot;: [ { \u0026quot;label\u0026quot;: \u0026quot;cmake\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;shell\u0026quot;, \u0026quot;command\u0026quot;: \u0026quot;cmake \u0026quot;, \u0026quot;args\u0026quot;: [ \u0026quot;-DCMAKE_BUILD_TYPE=Debug\u0026quot;,//可改为Release \u0026quot;..\u0026quot; ] }, { \u0026quot;label\u0026quot;: \u0026quot;make\u0026quot;, \u0026quot;group\u0026quot;:{ \u0026quot;kind\u0026quot;:\u0026quot;build\u0026quot;, \u0026quot;isDefault\u0026quot;:true }, \u0026quot;command\u0026quot;: \u0026quot;mingw32-make.exe\u0026quot;,//or make.exe \u0026quot;args\u0026quot;:[ ] }, { \u0026quot;label\u0026quot;:\u0026quot;Build my project\u0026quot;, \u0026quot;dependsOn\u0026quot;:[ \u0026quot;cmake\u0026quot;, \u0026quot;make\u0026quot; ] } ] } c_cpp_properties.json 这个文件可有可无，主要便于编程时vscode识别头文件，不会被标红\n{ \u0026quot;configurations\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;Win64\u0026quot;, \u0026quot;includePath\u0026quot;: [ \u0026quot;${workspaceFolder}/**\u0026quot;, \u0026quot;C:/Program Files/Opencv/opencv-4.6.0-src/build/x64/mingw/install/include\u0026quot;, \u0026quot;C:/Program Files/Opencv/opencv-4.6.0-src/build/x64/mingw/install/include/opencv2\u0026quot; ], \u0026quot;defines\u0026quot;: [ \u0026quot;_DEBUG\u0026quot;, \u0026quot;UNICODE\u0026quot;, \u0026quot;_UNICODE\u0026quot; ], \u0026quot;compilerPath\u0026quot;: \u0026quot;C:\\\\Program Files\\\\mingw64\\\\bin\\\\gcc.exe\u0026quot;, \u0026quot;cStandard\u0026quot;: \u0026quot;gnu17\u0026quot;, \u0026quot;cppStandard\u0026quot;: \u0026quot;gnu++20\u0026quot;, \u0026quot;intelliSenseMode\u0026quot;: \u0026quot;windows-gcc-x64\u0026quot; } ], \u0026quot;version\u0026quot;: 4 } ","permalink":"/post/21/","series":[],"tags":["cmake"],"title":"Cmake的简单使用"},{"authors":[],"categories":["Linux","rust"],"content":"rust交叉编译流程记录\nrust安装不多做赘述\n交叉编译即在本机编译出能在其它系统或架构运行的程序，需要对应编译工具链，本文介绍主机为linux的rust交叉编译\n查看本机编译工具链\nrustup show 显示为\nroot@debian:~# rustup show Default host: x86_64-unknown-linux-gnu rustup home: /root/.rustup stable-x86_64-unknown-linux-gnu (default) rustc 1.62.1 (e092d0b6b 2022-07-16) 输入\nrustup target list 显示支持的工具链\naarch64-apple-darwin aarch64-apple-ios aarch64-apple-ios-sim aarch64-fuchsia aarch64-linux-android aarch64-pc-windows-msvc aarch64-unknown-linux-gnu aarch64-unknown-linux-musl aarch64-unknown-none aarch64-unknown-none-softfloat arm-linux-androideabi arm-unknown-linux-gnueabi arm-unknown-linux-gnueabihf arm-unknown-linux-musleabi arm-unknown-linux-musleabihf armebv7r-none-eabi armebv7r-none-eabihf armv5te-unknown-linux-gnueabi armv5te-unknown-linux-musleabi armv7-linux-androideabi armv7-unknown-linux-gnueabi armv7-unknown-linux-gnueabihf armv7-unknown-linux-musleabi armv7-unknown-linux-musleabihf armv7a-none-eabi armv7r-none-eabi armv7r-none-eabihf asmjs-unknown-emscripten i586-pc-windows-msvc i586-unknown-linux-gnu i586-unknown-linux-musl i686-linux-android i686-pc-windows-gnu i686-pc-windows-msvc i686-unknown-freebsd i686-unknown-linux-gnu i686-unknown-linux-musl mips-unknown-linux-gnu mips-unknown-linux-musl mips64-unknown-linux-gnuabi64 mips64-unknown-linux-muslabi64 mips64el-unknown-linux-gnuabi64 mips64el-unknown-linux-muslabi64 mipsel-unknown-linux-gnu mipsel-unknown-linux-musl nvptx64-nvidia-cuda powerpc-unknown-linux-gnu powerpc64-unknown-linux-gnu powerpc64le-unknown-linux-gnu riscv32i-unknown-none-elf riscv32imac-unknown-none-elf riscv32imc-unknown-none-elf riscv64gc-unknown-linux-gnu riscv64gc-unknown-none-elf riscv64imac-unknown-none-elf s390x-unknown-linux-gnu sparc64-unknown-linux-gnu sparcv9-sun-solaris thumbv6m-none-eabi thumbv7em-none-eabi thumbv7em-none-eabihf thumbv7m-none-eabi thumbv7neon-linux-androideabi thumbv7neon-unknown-linux-gnueabihf thumbv8m.base-none-eabi thumbv8m.main-none-eabi thumbv8m.main-none-eabihf wasm32-unknown-emscripten wasm32-unknown-unknown wasm32-wasi x86_64-apple-darwin x86_64-apple-ios x86_64-fortanix-unknown-sgx x86_64-fuchsia x86_64-linux-android x86_64-pc-solaris x86_64-pc-windows-gnu x86_64-pc-windows-msvc x86_64-sun-solaris x86_64-unknown-freebsd x86_64-unknown-illumos x86_64-unknown-linux-gnu (installed) x86_64-unknown-linux-gnux32 x86_64-unknown-linux-musl x86_64-unknown-netbsd x86_64-unknown-none x86_64-unknown-redox 加入对应平台编译工具链和gcc\nrustup target add aarch64-unknown-linux-gnu sudo apt-get install -qq gcc-aarch64-linux-gnu #rustup toolchain install stable-aarch64-unknown-linux-gnu --force-non-host rustup target add x86_64-pc-windows-gnu apt-get install mingw-w64 -y #rustup toolchain install stable-x86_64-pc-windows-gnu --force-non-host #cross-x86_64-w64-mingw32 可运行命令确认\nrustup show aarch64-linux-gnu-gcc -v 编译\ncargo build --target=aarch64-unknown-linux-gnu --release cargo build --target=x86_64-pc-windows-gnu --release cargo run --target=x86_64-pc-windows-gnu --release --bin example ","permalink":"/post/20/","series":[],"tags":["rust"],"title":"rust交叉编译"},{"authors":[],"categories":["Linux","server"],"content":"pve 安装 分区修改扩容 openwrt安装\n安装 官方镜像地址: https://www.proxmox.com/en/downloads/category/iso-images-pve\nopenwrt 安装 使用winscp上传openwrt.img镜像到/var/lib/vz/template/iso/\ncd /var/lib/vz/template/iso/ #转换格式至qcow2，如果原openwrt镜像为qcow2格式可略过 qemu-img convert -f raw -O qcow2 synoboot.img synoboot.qcow2 qemu-img check synoboot.qcow2 #将镜像挂载在指定id 虚拟机上 qm importdisk 100 synoboot.qcow2 local-lvm 外设 网卡 直通 待添加\n无线网卡 athreo网卡报错修复\nar242x 网卡\nnano /etc/pve/local/qemu-server/100.conf #加入\nhostpci3: 0000:02:00.0 args: -set device.hostpci3.x-msix-relocation=bar2 硬盘 扩容 pve将原来的小硬盘换成容量更大的硬盘\n初始 使用dd 傲梅等工具，将原先硬盘克隆到新硬盘，如果一切顺利新的硬盘能正常启动\n执行fdisk -l\nfdisk -l 会出现红色提示，就是提示空间不匹配\nGPT PMBR size mismatch (1065503 != 1073151) will be corrected by write. The backup GPT table is corrupt, but the primary appears OK, so that will be used. The backup GPT table is not on the end of the device. 修复 apt-get update apt-get install parted parted -l 提示（例如）\nWarning: Not all of the space available to /dev/mapper/local--poor-vm--100--disk--0 appears to be used, you can fix the GPT to use all of the space (an extra 7647 blocks) or continue with the current setting? Fix/Ignore? 不停FIx就完事。\n扩容 通过执行\nparted -l 输出\nDevice Start End Sectors Size Type /dev/nvme0n1p1 4096 6109 2014 1007K BIOS boot /dev/nvme0n1p2 8192 1056767 1048576 512M EFI System /dev/nvme0n1p3 1060864 900194408 899133545 428.7G Linux LVM 选择需扩容的硬盘\nparted /dev/nvme0n1 进入程序后，输入\nprint 显示\nModel: SAMSUNG MZALQ512HALU-000L2 (nvme) Disk /dev/nvme0n1: 512GB Sector size (logical/physical): 512B/512B Partition Table: gpt Disk Flags: Number Start End Size File system Name Flags 1 2097kB 3128kB 1031kB bios_grub 2 4194kB 541MB 537MB fat32 boot, esp 3 543MB 461GB 460GB lvm 扩容分区3\nresizepart 3 100% quit fdisk -l 再次查看\n显示\nPartition Table: gpt Disk Flags: Number Start End Size File system Name Flags 1 2097kB 3128kB 1031kB bios_grub 2 4194kB 541MB 537MB fat32 boot, esp 3 543MB 461GB 460GB lvm lvm 扩容\npvresize /dev/nvme0n1p3 扩容lvm 逻辑卷\nlvextend [-L +/- \u0026lt;增减容量\u0026gt;] \u0026lt;逻辑卷名称\u0026gt; lvextend -l +100%FREE /dev/pve/data 查看逻辑卷是否分配完成\nnano /etc/pve/storage.cfg lvdisplay pvs 修复文件系统(注意此命令在磁盘挂载情况下，一般只能修复扩容，缩减一般必须卸载后执行)\nresize2fs \u0026lt;逻辑卷名称\u0026gt; resize2fs /dev/pve/data local-lvm的删除与创建 删除 先打开PVE的web页面，在数据中心-\u0026gt;存储页面 手动删除对应的local-lvm\n进入PVE的终端\n卸载与删除 lvm-thin\numount /dev/pve/data lvremove /dev/pve/data 检查有效空间 vgdisplay pve | grep Free 创建 如果要将local-lvm的容量归并到local, 则删除local-lvm 后使用 lvextend resizefs 修复\nEXT4 文件格式 进入PVE的终端 此处介绍两种方式，一种是lvm ext4 另一种是原先的lvm-thin，创建新的lvm分区（非lvm-thin）\n将多余空间 Note: 空余存储节点数 可从 lvdisplay pvs中见得。\nlvcreate -l \u0026lt;空余存储节点数\u0026gt; -n data pve 1.5 格式化 与 挂载\nmkfs.ext4 /dev/pve/data mkdir /mnt/data mount /dev/pve/data /mnt/data Note: mkfs.ext4 用于格式化为 ext4 , mkfs.xfs -f 用于格式化为 xfs\n1.6 修改 fstab文件, 使硬盘在系统启动时自动挂载，\nnano /etc/fstab #最后一行加入 /dev/pve/data /mnt/data ext4 defaults 0 0 Note: 如果使用 xfs, 就把上面的ext4 改为xfs\nLVM-thin 格式 卸载分区（如果有的话,路径自己通过pvs lvdisplay 查看） unmount umount /mnt/data lvremove /dev/pve/data 创建一存储块的分区，避免后续错误 lvcreate -l 1 -n data pve 转换成 thin-pool 格式 lvconvert --type thin-pool pve/data 拓展剩余分区 lvextend -l +99%FREE pve/data 重新修改 /etc/fstab 文件\n大致像这样\n# \u0026lt;file system\u0026gt; \u0026lt;mount point\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; /dev/pve/root / ext4 errors=remount-ro 0 1 UUID=3218-10BF /boot/efi vfat defaults 0 1 /dev/pve/swap none swap sw 0 0 proc /proc proc defaults 0 0 Proxmox使用创建的硬盘 登录PVE web 页面\n在数据中心-\u0026gt;存储页面， 点击添加\nReference: https://dannyda.com/2020/05/10/how-to-delete-remove-local-lvm-from-proxmox-ve-pve-and-some-lvm-basics-commands/\nhttps://qu1u1.cn/archives/pve%E5%88%A0%E9%99%A4local-lvm%E7%BB%99local%E6%89%A9%E5%AE%B9%E5%88%9B%E5%BB%BAlvm-thin\nhttps://blog.csdn.net/William_Lee1333/article/details/109148533\nhttps://www.wnark.com/archives/118.html\n","permalink":"/post/19/","series":[],"tags":["配置"],"title":"PVE (PROXMOX) 使用笔记"},{"authors":[],"categories":[],"content":"第二周日志.\n工作内容 看完前六张\n流水灯就看到14个灯珠？\n","permalink":"/docs/2022%E6%9A%91%E5%81%87%E5%AE%9E%E4%B9%A0%E6%96%87%E6%A1%A3/%E6%97%A5%E5%BF%97/week2/","series":[],"tags":[],"title":"第二周"},{"authors":[],"categories":["网络"],"content":"iptable.\n下列规则将会阻止来自某一特定IP范围内的数据包，因为该IP地址范围被管理员怀疑有大量恶意攻击者在活动：\niptables -t filter -A INPUT -s 123.456.789.0/24 -j DROP 也可以很轻易地阻止所有流向攻击者IP地址的数据包，该命令稍有不同：\niptables -t filter -A OUTPUT -d 123.456.789.0/24 -j DROP 注意这里的A选项，使用它说明是给现有的链添加规则 基于TCP协议的原理，为了彻底阻断攻击IP的连接，所以需要把流入流出到该IP的数据包都DROP掉\n最后补充一下，如果想针对某IP进行单独开放端口可以如下配置： 如果我需要对内网某机器单独开放mysql端口，应该如下配置：\niptables -A INPUT -s 192.168.2.6 -p tcp -m tcp --dport 3306 -j ACCEPT iptables -A OUTPUT -s 192.168.2.6 -p tcp -m tcp --sport 3306 -j ACCEPT 彻底禁止某IP访问: #屏蔽单个IP的命令是 iptables -I INPUT -s 123.45.6.7 -j DROP iptables -I INPUT -s 16.162.21.186 -j DROP #封整个段即从123.0.0.1到123.255.255.254的命令 iptables -I INPUT -s 123.0.0.0/8 -j DROP #封IP段即从123.45.0.1到123.45.255.254的命令 iptables -I INPUT -s 124.45.0.0/16 -j DROP #封IP段即从123.45.6.1到123.45.6.254的命令是 iptables -I INPUT -s 123.45.6.0/24 -j DROP 指令I是insert指令 但是该指令会insert在正确位置并不像A指令看你自己的排序位置，因此用屏蔽因为必须在一开始就要加载屏蔽IP，所以必须使用I命令加载，然后注意执行/etc/rc.d/init.d/iptables save进行保存后重启服务即可 屏蔽或开启常见端口\n屏蔽或开启常用的TCP、UDP端口： #可以使用DROP替换ACCEPT，实现端口屏蔽。 #打开22端口（SSH） # iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT # iptables -A INPUT -p tcp -s 192.168.1.0/24 -m state --state NEW --dport 22 -j ACCEPT #打开TCP/UDP631端口（打印服务） # iptables -A INPUT -p udp -s 192.168.1.0/24 -m udp --dport 631 -j ACCEPT # iptables -A INPUT -p tcp -s 192.168.1.0/24 -m tcp --dport 631 -j ACCEPT # 打开123端口，允许局域网用户进行NTP时间同步 # iptables -A INPUT -p udp -s 192.168.1.0/24 -m state --state NEW --dport 123 -j ACCEPT #打开25端口（SMTP） # iptables -A INPUT -p tcp -m state --state NEW --dport 25 -j ACCEPT # 打开DNS端口 # iptables -A INPUT -p udp -m state --state NEW --dport 53 -j ACCEPT # iptables -A INPUT -p tcp -m state --state NEW --dport 53 -j ACCEPT #打开http/https端口 # iptables -A INPUT -p tcp -m state --state NEW --dport 80 -j ACCEPT # iptables -A INPUT -p tcp -m state --state NEW --dport 443 -j ACCEPT #打开TCP110端口（POP3） # iptables -A INPUT -p tcp -m state --state NEW --dport 110 -j ACCEPT #打开TCP143端口 # iptables -A INPUT -p tcp -m state --state NEW --dport 143 -j ACCEPT #为局域网用户开启Samba访问 # iptables -A INPUT -p tcp -s 192.168.1.0/24 -m state --state NEW --dport 137 -j ACCEPT # iptables -A INPUT -p tcp -s 192.168.1.0/24 -m state --state NEW --dport 138 -j ACCEPT # iptables -A INPUT -p tcp -s 192.168.1.0/24 -m state --state NEW --dport 139 -j ACCEPT # iptables -A INPUT -p tcp -s 192.168.1.0/24 -m state --state NEW --dport 445 -j ACCEPT #为局域网用户开启代理服务器访问 # iptables -A INPUT -p tcp -s 192.168.1.0/24 -m state --state NEW --dport 3128 -j ACCEPT #为局域网用户开启MySQL访问 # iptables -I INPUT -p tcp --dport 3306 -j ACCEPT ","permalink":"/post/18/","series":[],"tags":["vps","配置"],"title":"iptable使用小记"},{"authors":[],"categories":[],"content":"第一周日志.\n周一 入职，拿回车子。装新的vmware。\n找镜像先把环境搭好。\nvmware install vmware下载地址：\nhttps://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html\nvmware激活许可证：ZF3R0-FHED2-M80TY-8QYGC-NPKYF\nubuntu init ubuntu 有很多种桌面版，对于系统我自己喜欢用的是kde，建议新手用gnome，可能网上中文资料多点。\nubuntu (gnome)\nhttps://releases.ubuntu.com/18.04.6/ubuntu-18.04.6-desktop-amd64.iso\nkubuntu (kde)\nhttps://cdimage.ubuntu.com/kubuntu/releases/18.04/release/kubuntu-18.04.5-desktop-amd64.iso\n换源\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.bak\rsudo sed -i 's/archive.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list\r#nano /etc/apt/sources.list\rsudo apt update \u0026amp;\u0026amp; sudo apt upgrade\r# 常用软件\rsudo apt install -y net-tools curl wget htop powertop\rsudo apt autoremove\rros install sudo sh -c '. /etc/lsb-release \u0026amp;\u0026amp; echo \u0026quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main\u0026quot; \u0026gt; /etc/apt/sources.list.d/ros-latest.list'\rsudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\rsudo apt update\rsudo apt install -y ros-melodic-desktop-full\rsudo apt-get install ros-melodic-desktop-full\rsudo apt-get install -y ros-melodic-rqt*\rsudo apt install -y python-rosdep2\rsudo rosdep fix-permissions\rrosdep update #github 被干扰严重多试几次 或者参考\r#https://blog.csdn.net/QLeelq/article/details/119041164\r#https://mp.weixin.qq.com/s/VGs8oWdhHH6XsHcx21lN4Q\r#或者直接上软路由\rsudo rosdep init\rsudo apt-get -y install python-rosinstall\rsudo apt-get -y install ros-melodic-catkin python-catkin-tools\rsudo apt-get install ros-melodic-ros-tutorials\rsudo apt-get install ros-melodic-rqt-graph\rsudo apt install rosbash\recho \u0026quot;source /opt/ros/melodic/setup.bash\u0026quot; \u0026gt;\u0026gt; ~/.bashrc\rsource ~/.bashrc\r打算写个ros安装一键脚本，顺便用一种很dirty的方式实现rosdep update 国内访问不畅\n注意脚本还没写好，新建文件夹doge\nwget uwp.cc/s/install/install.sh \u0026amp;\u0026amp; chmod +x install.sh \u0026amp;\u0026amp; ./install.sh\r关于\n周二 翻译文档（7 9 10 11 12 13），周五完成\n工作时间 9:00-12:30 (3.5h)\n14:00-15:15 (1h)\n18:15-22:30 (4.5h)\n共9h\n工作内容 总述： 文本翻译：50/50\n目录翻译：44/50\n图片翻译：10/50\n校对：0/50\n为保持文档完整性，暂时不用已经翻译好的内容\n细则 第7章 文本翻译 目录翻译 图片翻译 简单校对 原中文文档 7.8 有一处图片路径出错 7.9 brocast_cpp图片 错别字“海龟”\n第9章\n文本翻译\n目录翻译\n图片翻译\n简单校对\n第10章\n文本翻译\n目录翻译\n图片翻译\n简单校对\n第11章\n文本翻译\n目录翻译\n图片翻译\n简单校对\n第12章\n文本翻译\n目录翻译\n图片翻译\n简单校对\n第13章\n文本翻译\n目录翻译\n图片翻译\n简单校对\n13.3 image-20220330103444425.png 部分字母错误\n周三 翻译文档（7 9 10 11 12 13），周五完成\n工作时间 9:30-12:30 (3h)\n14:00-16:15 (2h)\n21:00-1:00 (4h)\n共9h\n完成情况 总述： 文本翻译：50/50\n目录翻译：50/50\n图片翻译：45/50 (待完成：11.5 11.6 11.8 11.9 13.1) 图片比较复杂\n简单校对：0/50\n为保持文档完整性，暂时不用已经翻译好的内容,共50节\n细则 第7章 共10节 文本翻译 目录翻译 图片翻译 简单校对 原中文文档 7.8 有一处图片路径出错 7.9 brocast_cpp图片 错别字“海龟”\n第9章 共8节\n文本翻译\n目录翻译\n图片翻译\n简单校对\n第10章 共9节\n文本翻译\n目录翻译\n图片翻译\n简单校对\n10.1 文档内url 奥比中光下载链接错误： https://developer.orbbec.com.cn/download.html?id=32\nhttps://developer.orbbec.com.cn/download.html?id=77\n第11章 共13节 文本翻译 目录翻译 图片翻译 简单校对 11.10.2.2 缺少图片 C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20220224160256093.png\n第12章 共4节\n文本翻译\n目录翻译\n图片翻译\n简单校对\n第13章 共6节\n文本翻译\n目录翻译\n图片翻译\n简单校对\n13.3 image-20220330103444425.png 部分字母错误\n周四 翻译文档（7 9 10 11 12 13），周五完成\n工作时间 9:00-12:30 (3.5h) 14:00-18:30 (4.5h)\n共8h\n工作内容 总述： 共50节\n文本翻译：50/50\n目录翻译：50/50\n图片翻译：50/50\n简单校对：0/50\n为保持文档完整性，暂时不用已经翻译好的内容,共50节\n细则 第7章 共10节 文本翻译 目录翻译 图片翻译 简单校对 原中文文档 7.8 有一处图片路径出错 7.9 brocast_cpp图片 错别字“海龟”\n第9章 共8节\n文本翻译\n目录翻译\n图片翻译\n简单校对\n第10章 共9节\n文本翻译\n目录翻译\n图片翻译\n简单校对\n10.1 文档内url 奥比中光下载链接错误： https://developer.orbbec.com.cn/download.html?id=32\nhttps://developer.orbbec.com.cn/download.html?id=77\n第11章 共13节 文本翻译 目录翻译 图片翻译 简单校对 11.10.2.2 缺少图片 C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20220224160256093.png\n第12章 共4节\n文本翻译\n目录翻译\n图片翻译\n简单校对\n第13章 共6节\n文本翻译\n目录翻译\n图片翻译\n简单校对\n13.3 image-20220330103444425.png 部分字母错误\n周五 翻译文档收尾\n工作时间 10:00-12:30 (2.5h)\n14:30-19:00 (4.5h)\n20:00-21:00 (1h) 共 8h\n工作内容 段落标签校对\n语句词汇理解校对\n翻译纠错\nLidar 是激光雷达的专有词汇\nRadar 是普通雷达\n看公司中文文档，学习\n看linux内核相关\n","permalink":"/docs/2022%E6%9A%91%E5%81%87%E5%AE%9E%E4%B9%A0%E6%96%87%E6%A1%A3/%E6%97%A5%E5%BF%97/week1/","series":[],"tags":[],"title":"第一周"},{"authors":[],"categories":[],"content":"其他系统转换为archlinux.\nProin pretium lorem a justo euismod condimentum https://wiki.malacology.net/Server/vps2arch/\n","permalink":"/docs/linux%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/vps2arch/","series":[],"tags":[],"title":"vps2arch"},{"authors":[],"categories":[],"content":"整合版，sh文件\n使用方法 root用户下\nwget uwp.cc/s/box.sh \u0026amp;\u0026amp; chmod +x ./box.sh \u0026amp;\u0026amp; ./box.sh\r部分DNS解析cc域名失效，建议换DNS 8.8.8.8\n","permalink":"/docs/linux%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/debian%E5%B7%A5%E5%85%B7%E5%8C%85/","series":[],"tags":[],"title":"debian工具包"},{"authors":[],"categories":[],"content":"windows 10只支持部分dns地址开启加密dns(doh)，国内若要加入其他加密dns须加入白名单\n使用方法 powershell(管理员)下输入，有什么微调的自己修改就行了\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Dnscache\\Parameters\\DohWellKnownServers\rSet-DNSClientServerAddress\rAdd-DnsClientDohServerAddress -ServerAddress '94.140.14.14' -DohTemplate 'https://dns.adguard.com/dns-query' -AllowFallbackToUdp $False -AutoUpgrade $True\rAdd-DnsClientDohServerAddress -ServerAddress '94.140.15.15' -DohTemplate 'https://dns.adguard.com/dns-query' -AllowFallbackToUdp $False -AutoUpgrade $True\rAdd-DnsClientDohServerAddress -ServerAddress '2a10:50c0::ad1:ff' -DohTemplate 'https://dns.adguard.com/dns-query' -AllowFallbackToUdp $False -AutoUpgrade $True\rAdd-DnsClientDohServerAddress -ServerAddress '2a10:50c0::ad2:ff' -DohTemplate 'https://dns.adguard.com/dns-query' -AllowFallbackToUdp $False -AutoUpgrade $True\rAdd-DnsClientDohServerAddress -ServerAddress '119.29.29.29' -DohTemplate 'https://doh.pub/dns-query' -AllowFallbackToUdp $False -AutoUpgrade $True\rAdd-DnsClientDohServerAddress -ServerAddress '2402:4e00::' -DohTemplate 'https://doh.pub/dns-query' -AllowFallbackToUdp $False -AutoUpgrade $True\rAdd-DnsClientDohServerAddress -ServerAddress '223.5.5.5' -DohTemplate 'https://dns.alidns.com/dns-query' -AllowFallbackToUdp $False -AutoUpgrade $True\rAdd-DnsClientDohServerAddress -ServerAddress '223.6.6.6' -DohTemplate 'https://dns.alidns.com/dns-query' -AllowFallbackToUdp $False -AutoUpgrade $True\rAdd-DnsClientDohServerAddress -ServerAddress '2400:3200::1' -DohTemplate 'https://dns.alidns.com/dns-query' -AllowFallbackToUdp $False -AutoUpgrade $True\rAdd-DnsClientDohServerAddress -ServerAddress '2400:3200:baba::1' -DohTemplate 'https://dns.alidns.com/dns-query' -AllowFallbackToUdp $False -AutoUpgrade $True\r参考文档 依照的官方参考文档，全英文\nhttps://docs.microsoft.com/zh-cn/windows-server/networking/dns/doh-client-support\nhttps://docs.microsoft.com/en-us/windows-server/networking/dns/doh-client-support#configure-the-dns-client-to-support-doh\n","permalink":"/docs/linux%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/win10%E5%8A%A0%E5%85%A5%E9%9D%9E%E7%99%BD%E5%90%8D%E5%8D%95doh/","series":[],"tags":[],"title":"win10加入非白名单doh"},{"authors":[],"categories":["analytics"],"content":"缘由 matomo ，google等一系列会被屏蔽，\n操作 使用软连接改名\nreference: https://issues.matomo.org/7364\n","permalink":"/post/17/","series":[],"tags":[],"title":"matomo防屏蔽"},{"authors":[],"categories":["网络"],"content":"缘由是感觉wordpress 太卡了，1C1H的服务器使用后台时反应慢所以就换纯静态的了，之前用过hexo，现在感觉hugo不错\n操作 ./hugo new site ./blog mv ./wp-hugo.zip ./blog cd ./blog/themes git clone https://github.com/rujews/maupassant-hugo.git cd ../ vi config.toml 主题：https://github.com/flysnow-org/maupassant-hugo\nconfig baseURL = \u0026quot;https://blog.kquark.com\u0026quot; languageCode = \u0026quot;zh-cn\u0026quot; title = \u0026quot;Kquark blog\u0026quot; hasCJKLanguage = true # 中日韩语言支持 theme = \u0026quot;maupassant-hugo\u0026quot; # 主题名称，与themes目录下名称一致 enableRobotsTXT = true # 爬虫支持 PaginatePath = \u0026quot;page\u0026quot; # 分页 summaryLength = 140 # 摘要显示字数 #googleAnalytics = \u0026quot;UA-110008600-0\u0026quot; [author] name = \u0026quot;Kquark\u0026quot; [params] subtitle = \u0026quot;一个 个人网站\u0026quot; description = \u0026quot;奇技淫巧和技术分享\u0026quot; # 在页面meta属性里 keywords = \u0026quot;python,rust,linux,vps,服务器,机器学习,robot,AI\u0026quot; # 在页面meta属性里 toc = true # 支持文章大纲 #busuanzi = true #registerInfo = \u0026quot;粤ICP备18000000号-1\u0026quot; related = true #googleAd = \u0026quot;ca-pub-300057030000200\u0026quot; [[menu.main]] # 菜单栏，这里是关于页 identifier = \u0026quot;archives\u0026quot; name = \u0026quot;存档\u0026quot; url = \u0026quot;/archives/\u0026quot; weight = 3 [[menu.main]] # 菜单栏，这里是关于页 identifier = \u0026quot;about\u0026quot; name = \u0026quot;关于\u0026quot; url = \u0026quot;/about/\u0026quot; weight = 4 [markup] [markup.highlight] lineNos = true style = \u0026quot;github\u0026quot; [params.cc] name = \u0026quot;知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议\u0026quot; link = \u0026quot;https://creativecommons.org/licenses/by-nc-nd/4.0/\u0026quot; cd public git init git remote add origin git@github.com:00000/0000.github.io.git git add . git commit -m 'init' git push -f --set-upstream origin master reference: https://www.kancloud.cn/yunduanio/gohugo_learning/1439166\n","permalink":"/post/16/","series":[],"tags":[],"title":"博客从wordpress迁移至hugo"},{"authors":[],"categories":[],"content":"adguardhome docker\n使用方法 docker pull adguard/adguardhome:latest # 稳定版 docker pull adguard/adguardhome:edge # 最新的版本，可能不稳定\nsudo docker run --name adguardhome \\\r-v /root/adguardhome/workdir/work:/opt/adguardhome/work \\\r-v /root/adguardhome/confdir/conf:/opt/adguardhome/conf \\\r-p 53:53/tcp -p 53:53/udp \\\r-p 80:80/tcp -p 3000:3000/tcp \\\r-p 67:67/udp -p 68:68/tcp -p 68:68/udp \\\r-p 443:443/tcp \\\r-p 853:853/tcp \\\r-d adguard/adguardhome\r自己改文件想放的位置/root/adguardhome/workdir\n注意！ 国内公网服务器禁止搭建DNS服务\n国外公网服务器搭建DNS服务常用容易被探测和ban\n换端口样例：\nsudo docker run --name adguardhome \\\r-v /www/wwwroot/tools/adguardhome/work:/opt/adguardhome/work \\\r-v /www/wwwroot/tools/adguardhome/conf:/opt/adguardhome/conf \\\r-p 30053:53/tcp \\\r-p 53:53/udp \\\r-p 30000:3000/tcp \\\r-p 30443:443/tcp \\\r-p 30853:853/tcp \\\r-d adguard/adguardhome\rDNS 随便举几个例子比如\n223.5.5.5\ndoh.pub\ndot.pub\n","permalink":"/docs/linux%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/adguardhome/","series":[],"tags":[],"title":"adguardhome docker安装"},{"authors":[],"categories":["网络"],"content":"wireshark install and privileges\nreference:https://wiki.archlinux.org/title/Wireshark\ninstall:\nsudo pacman -S wireshark-qt\nCapturing privileges：\n1.添加wireshark用户组\u0026lt;br\u0026gt;sudo groupadd wireshark\n2.将dumpcap更改为wireshark用户组\u0026lt;br\u0026gt;sudo chgrp wireshark /usr/bin/dumpcap\n3.让wireshark用户组有root权限使用dumpcap\u0026lt;br\u0026gt;sudo chmod 4755 /usr/bin/dumpcap\n4.将需要使用的用户名加入wireshark用户组\u0026lt;br\u0026gt;sudo gpasswd -a username wireshark1\n","permalink":"/post/15/","series":[],"tags":[],"title":"wireshark install and privileges on Archlinux"},{"authors":[],"categories":["未分类"],"content":"使用poste.io(Docker)自建邮局\n在若大的互联网，我们都会通过邮箱注册各种各样的账号，但是很多时候只有一个主邮箱有着诸多不便，所以我们希望，最好是一个平台对应一个email，且无限制。\n我在找了很多可以私有部署的邮局之后，最终选择了poste.io，只看中了一个点，轻量化部署，1G内存完全足矣，而且部署方便，也就意味着迁移方便。\n环境 下面我将在腾讯云的VPS上面部署，配置如下：\n1 Core 1G RAM Ubuntu +宝塔\nuname -a Linux VM-*-*-ubuntu 5.4.110-bbrplus #1 SMP Sat Apr 10 01:14:42 CST 2021 x86_64 x86_64 x86_64 GNU/Linux docker和docker-componse安装请参考Install Docker Engine on CentOS和Install Docker Compose。\n运行poste.io 创建poste.io运行目录 $ mkdir -p /www/wwwroot/tools/mail $ cd /www/wwwroot/tools/mail 创建数据存放目录 $ mkdir data 创建docker-compose.yml配置文件 $ nano docker-compose.yml version: \u0026quot;3.3\u0026quot; services: mail: image: analogic/poste.io restart: always hostname: mail.kquark.com ports: - \u0026quot;25:25\u0026quot; - \u0026quot;172.17.0.1:62030:8080\u0026quot; #- \u0026quot;4433:4433\u0026quot; - \u0026quot;110:110\u0026quot; - \u0026quot;143:143\u0026quot; - \u0026quot;465:465\u0026quot; - \u0026quot;587:587\u0026quot; - \u0026quot;993:993\u0026quot; - \u0026quot;995:995\u0026quot; environment: - TZ=Asia/Shanghai - DISABLE_CLAMAV=TRUE - DISABLE_RSPAMD=TRUE - HTTPS=OFF - HTTP_PORT=8080 #- HTTPS_PORT=4433 volumes: - ./data:/data 由于https是在NGINX上面配置的，所以poste.io只运行80端口且绑定在172.17.0.1:8080这个docker的host地址。\n下面两个配置是关闭反垃圾邮件的功能，实测可以节省很多内存\n- DISABLE_CLAMAV=TRUE - DISABLE_RSPAMD=TRUE 在部署中，HTTPS我们在NGINX中上面配置，为了可以共用80和443，至于那些选项是什么意思，可以参考Getting started，官方文档会有说明。\n运行 $ docker-compose up -d 出错 Status: Downloaded newer image for analogic/poste.io:latest Creating mail_mail_1 ... Creating mail_mail_1 ... error ERROR: for mail_mail_1 Cannot start service mail: driver failed programming external connectivity on endpoint mail_mail_1 (999b3565861677c81593522d582fc590e50576437d6551e70db650a4ed73fc86): Error starting userland proxy: listen tcp4 0.0.0.0:587: bind: address already in use ERROR: for mail Cannot start service mail: driver failed programming external connectivity on endpoint mail_mail_1 (999b3565861677c81593522d582fc590e50576437d6551e70db650a4ed73fc86): Error starting userland proxy: listen tcp4 0.0.0.0:587: bind: address already in use ERROR: Encountered errors while bringing up the project. root@VM-*-*-ubuntu:/www/wwwroot/tools/mail# lsof -i:587 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME master 3167292 root 18u IPv4 49042101 0t0 TCP *:submission (LISTEN) master 3167292 root 19u IPv6 49042102 0t0 TCP *:submission (LISTEN) root@VM-*-*-ubuntu:/www/wwwroot/tools/mail# kill -9 3167292 root@VM-*-*-ubuntu:/www/wwwroot/tools/mail# lsof -i:587 查看日志 $ docker-compose logs -f # 当出现下面的提示表示启动完成 ...... mail_1 | \u0026amp;#91;cont-init.d] 98-timezone.sh: exited 0. mail_1 | \u0026amp;#91;cont-init.d] 99-custom-plugins: executing... mail_1 | \u0026amp;#91;cont-init.d] 99-custom-plugins: exited 0. mail_1 | \u0026amp;#91;cont-init.d] done. mail_1 | \u0026amp;#91;services.d] starting services mail_1 | mail_1 | mail_1 | Poste.io administration available at https://172.19.0.2:443 or http://172.19.0.2:8080 mail_1 | mail_1 | mail_1 | \u0026amp;#91;services.d] done. 配置DNS解析 官方文档请参考Configuring DNS，我的域名是放在Cloudflare的，首先我们需要加一条A记录，如下：\n增加imap、pop、smtp记录\n增加MX、SPF、DMARC 其实我都已经加好了，所以我只是截图把配置发出来，按照上面的配置对照着来就可以\n配置宝塔 做好反代，反代172.17.0.1:62030，略\n浏览器访问https://mail.ansheng.me/，会让你配置管理员的账号和密码，做对应的设置就可以\n配置 登陆后台的面板大概长这样\nTLS 选择左侧栏的System settings -\u0026gt; TLS certificate，我们需要上传ssl证书到poste.io，否则客户端TLS无法使用\nDKIM 为了防止进入垃圾箱，我们需要添加DKIM的配置，找到Virtual domains -\u0026gt; mail.ansheng.me请选择自己的域名 -\u0026gt; 点击create new key\n在到DNS里面添加以下记录\n收发件测试 配置完成之后我们可以退出登录，然后登陆https://mail.***.***/webmail/，发送一封邮件到其他邮箱测试是否可以收到\n打开Gmail，很快就会收到邮件，有可能会进垃圾箱，可能解析还没生效\n然后我们回复邮件看是否能收到\n客户端 如果你需要配置客户端，例如通过Gmail、Foxmail这些第三方的，请参考Example client settings，注意host和端口，我在iOS上面的Gmail已经配置成功，可以收发邮件，正常使用。\n结尾 端口说明 端口 描述 25 SMTP – mostly processing incoming mails 110 POP3 – standard protocol for accessing mailbox, STARTTLS is required before client auth 143 IMAP – standard protocol for accessing mailbox, STARTTLS is required before client auth 465 SMTPS – Legacy SMTPs port 587 MSA – SMTP port used primarily for email clients after STARTTLS and auth 993 IMAPS – alternative port for IMAP encrypted since connection 995 POP3S – encrypted POP3 since connections 其实在了解poste.io是怎么运行的原理之后，在研究其他邮局也都是大同小异。\n参考：https://ansheng.me/container-docker-deploy-poste-io-private-post-office/\n","permalink":"/post/14/","series":[],"tags":[],"title":"容器(Docker)自建邮箱poste.io"},{"authors":[],"categories":["php","服务器","未分类"],"content":"php获取bing背景图\n测试链接： https://api.kquark.com/bing\nhttps://api.kquark.com/bing/?idx=1\u0026amp;n=1\u0026amp;size=UHD\nidx 取值0-8，代表前几天图片，n代表一次获取多少张图片url（暂无用），size代表图片质量部分可取参数如下 size参数：\nresolutions: [ 'UHD', '1920x1200', '1920x1080', '1366x768', '1280x768', '1024x768', '800x600', '800x480', '768x1280', '720x1280', '640x480', '480x800', '400x240', '320x240', '240x320' ] 设计原理依据bing api 获取\nhttps://bing.com/HPImageArchive.aspx?idx=0\u0026amp;n=1 php代码：\n\u0026lt;?php $predate = $_GET['idx']; $num = $_GET['n']; $size = $_GET['size']; if(strlen($predate)==0){ $predate=rand(0,8); } if(strlen($num)==0){ $num = 1; } if(strlen($size)==0){ $size = 'UHD'; } echo 'predate:'.$predate.'\u0026lt;br\u0026gt;'; echo 'num:'.$num.'\u0026lt;br\u0026gt;'; echo 'size:'.$size.'\u0026lt;br\u0026gt;'; $bingurl='https://bing.com/HPImageArchive.aspx?idx='.$predate.'\u0026amp;n='.$num; //'https://bing.com/HPImageArchive.aspx?idx=0\u0026amp;n=1' echo $bingurl.'\u0026lt;br\u0026gt;'; $str = file_get_contents($bingurl); // 从bing获取数据 if(preg_match('/\u0026lt;url\u0026gt;([^\u0026lt;]+)\u0026lt;\\/url\u0026gt;/isU', $str, $matches)) { // 正则匹配抓取图片url $imgurl = 'http://bing.com'.$matches[1]; } else { // 如果由于某些原因，没抓取到图片地址 $imgurl = 'https://bing.com/th?id=OHR.GreaterFlamingosIndia_ZH-CN5655181892_UHD.jpg'; // 使用默认的图像(默认图像链接可修改为自己的) } $imgurl=str_replace(\u0026quot;1920x1080\u0026quot;,$size,$imgurl); echo $imgurl.'\u0026lt;br\u0026gt;'; header(\u0026quot;Location: {$imgurl}\u0026quot;); // 跳转至目标图像 nginx伪静态：\nlocation /bing/ { if (-f $request_filename) { break; } rewrite ^/bing/(.*)$ /bing/bing.php?idx=$1\u0026amp;n=$2\u0026amp;size=$3 last; } php 保存图片：\n\u0026lt;?php //error_reporting(0); //$predate = $_GET['idx']; //$num= $_GET['n']; $predate = $_GET['idx']; $num = $_GET['n']; $size = $_GET['size']; $path = 'img'; //设置图片缓存文件夹 $filename = date(\u0026quot;Ymd\u0026quot;) . '.jpg'; //用年月日来命名新的文件名 if(strlen($predate)==0){ $predate=rand(0,8); } if(strlen($num)==0){ $num = 1; } if(strlen($size)==0){ $size = 'UHD'; } echo 'predate:'.$predate.'\u0026lt;br\u0026gt;'; echo 'num:'.$num.'\u0026lt;br\u0026gt;'; echo 'size:'.$size.'\u0026lt;br\u0026gt;'; //https://api.kquark.com/bing $bingurl='https://bing.com/HPImageArchive.aspx?idx='.$predate.'\u0026amp;n='.$num; //'https://bing.com/HPImageArchive.aspx?idx=0\u0026amp;n=1' echo $bingurl.'\u0026lt;br\u0026gt;'; $str = file_get_contents($bingurl); // 从bing获取数据 if(preg_match('/\u0026lt;url\u0026gt;([^\u0026lt;]+)\u0026lt;\\/url\u0026gt;/isU', $str, $matches)) { // 正则匹配抓取图片url $imgurl = 'http://bing.com'.$matches[1]; } else { // 如果由于某些原因，没抓取到图片地址 $imgurl = 'https://bing.com/th?id=OHR.BlossomsBC_ROW7514274008_UHD.jpg\u0026amp;amp;rf=LaDigue_UHD.jpg\u0026amp;amp;pid=hp'; // 使用默认的图像(默认图像链接可修改为自己的) } $imgurl=str_replace(\u0026quot;1920x1080\u0026quot;,$size,$imgurl); echo $imgurl.'\u0026lt;br\u0026gt;'; saveImage($path,$filename); header(\u0026quot;Location: {$imgurl}\u0026quot;); // 跳转至目标图像 function saveImage($path= \u0026quot;\u0026quot;,$filename = \u0026quot;\u0026quot;) { if (!file_exists($path.'/'. $filename)) //如果文件不存在，则说明今天还没有进行缓存 { if(!file_exists($path)) //如果目录不存在 { echo 'create path'.'\u0026lt;br\u0026gt;'; mkdir($path, 0777); //创建缓存目录 } echo 'try save'.$filename.'\u0026lt;br\u0026gt;'; $str = file_get_contents('http://bing.com/HPImageArchive.aspx?format=js\u0026amp;idx=0\u0026amp;n=1'); $str = json_decode($str,true); $imgurl = 'http://bing.com'.$str['images'][0]['url']; //获取图片url $imgurl=str_replace(\u0026quot;1920x1080\u0026quot;,'UHD',$imgurl); $img = grabImage($imgurl, $path.'/'.$filename); //读取并保存图片 $handle = fopen(\u0026quot;dat.txt\u0026quot;, \u0026quot;a\u0026quot;); //用于存放图片信息，如果不需要保存图片的相关信息，可以把下面这些去掉。 if ($handle) { $copyright = $str['images'][0]['copyright']; //说明 $startdate = $str['images'][0]['startdate']; $fullstartdate = $str['images'][0]['fullstartdate']; $enddate = $str['images'][0]['enddate']; $urlbase = $str['images'][0]['urlbase']; $copyrightlink = $str['images'][0]['copyrightlink']; $quiz = $str['images'][0]['quiz']; $wp = $str['images'][0]['wp']; $hsh = $str['images'][0]['hsh']; $drk = $str['images'][0]['drk']; $top = $str['images'][0]['top']; $bot = $str['images'][0]['bot']; $tempArr = array(\u0026quot;imgurl\u0026quot;=\u0026gt;$imgurl,\u0026quot;copyright\u0026quot;=\u0026gt;$copyright, \u0026quot;startdate\u0026quot;=\u0026gt;$startdate, \u0026quot;fullstartdate\u0026quot;=\u0026gt;$fullstartdate, \u0026quot;enddate\u0026quot;=\u0026gt; $enddate, \u0026quot;urlbase\u0026quot;=\u0026gt;$urlbase, \u0026quot;copyrightlink\u0026quot;=\u0026gt; $copyrightlink, \u0026quot;quiz\u0026quot;=\u0026gt;$quiz, \u0026quot;wp\u0026quot;=\u0026gt; $wp, \u0026quot;hsh\u0026quot;=\u0026gt;$hsh,\u0026quot;drk\u0026quot;=\u0026gt;$drk, \u0026quot;top\u0026quot;=\u0026gt; $top, \u0026quot;bot\u0026quot;=\u0026gt; $bot); //将相关信息放进数组中 fwrite($handle, json_encode($tempArr) .\u0026quot;\\r\\n\u0026quot;); //最终以json格式保存在文本文档中 fclose($handle); } $handle = fopen(\u0026quot;url_dat.txt\u0026quot;, \u0026quot;a\u0026quot;); //用于存放图片信息，如果不需要保存图片的相关信息，可以把下面这些去掉。 if ($handle) { fwrite($handle,date(\u0026quot;Ymd\u0026quot;).':'.$imgurl .\u0026quot;\\r\\n\u0026quot;); fclose($handle); } } else { echo 'today saved:'.$path.'/'. $filename.'\u0026lt;br\u0026gt;'; } } /** * 远程抓取图片并保存 * @param $url 图片url * @param $filename 保存名称和路径 */ function grabImage($url, $filename = \u0026quot;\u0026quot;) { if($url == \u0026quot;\u0026quot;) return false; //如果$url地址为空，直接退出 if ($filename == \u0026quot;\u0026quot;) //如果没有指定新的文件名 { $ext = strrchr($url, \u0026quot;.\u0026quot;); //得到$url的图片格式 $filename = date(\u0026quot;Ymd\u0026quot;) . $ext; //用天月面时分秒来命名新的文件名 } ob_start(); //打开输出 readfile($url); //输出图片文件 $img = ob_get_contents(); //得到浏览器输出 ob_end_clean(); //清除输出并关闭 $size = strlen($img); //得到图片大小 $fp2 = @fopen($filename, \u0026quot;a\u0026quot;); fwrite($fp2, $img); //向当前目录写入图片文件，并重新命名 fclose($fp2); return $filename; //返回新的文件名 } ","permalink":"/post/13/","series":[],"tags":[],"title":"实现bing背景获取（php）"},{"authors":[],"categories":["C++","opencv","编程"],"content":" 原图（左）边缘检测（右）\n角点检测（左）矩形检测（右）\n仿射变换\n截图\n圆检测，粗略定位\n亚像素检测，最小二乘圆定位\n计算坐标\n仿射逆变换后坐标\n","permalink":"/post/12/","series":[],"tags":["C++","opencv","编程"],"title":"opencv 查找圆与亚像素定位"},{"authors":[],"categories":["Linux","嵌入式"],"content":" 宣传图\n拆机\nAX6与AX3600对比\n红米 AX6 和小米 AX3600 配置基本相同，少了ROM和功放，性价比极高。\n解锁 SSH 比较麻烦。\n教程主要参考了：\nhttps://xn--m80a.ml/openwrt/dev/10.html ，GitHub 非常感谢 CN_SZTL天灵巨佬\nhttps://qust.me/post/hong-mi-ax6-jie-suo-ssh-an-zhuang-shi-yong-shellclash-jiao-cheng/\nhttps://www.right.com.cn/forum/thread-4032490-1-1.html\n准备 一台电脑（Windows Mac均可）\n另外一台已经是 openwrt 的路由器（打开了 SSH，用来当服务器）\nWindows 需要安装 Xshell，mobaXterm，Putty 和 WinSCP｜Mac 使用命令行即可\n下载好降级固件 红米 ax6 1.0.18 固件 以及 下载 GitHub 脚本\n第一步｜降级并恢复出厂设置 降级\n打开路由器后台选择 系统升级—手动升级—然后选择下载好的固件，勾选恢复出厂设置，等待重启。放在一旁即可\n第二步｜准备 openwrt 服务 我这里准备的是一台刷了 openwrt 的 r2s，插上了usb网卡，配置好wifi，只需要接上电源有 Wi-Fi 信号，然后使用网线连接此 openwrt 路由器。我的这台 openwrt 路由器的地址是 10.0.0.1 你的应该不是，下面也记得改。scp 上传 wireless.sh 到 openwrt 路由器。（如果你是 Windows 命令提示符里没有 scp 功能的话你可以单独下载一个 WinSCP）\nscp wireless.sh root@10.0.0.1:/root/wireless.sh 然后 ssh 连接到这台 openwrt 路由器。\nssh root@10.0.0.1 再执行脚本（执行本脚本会更改您的网络和无线设定，执行之前请务必备份相关数据）\nsh /root/wireless.sh 不使用脚本：\n1.在老路由器下创建xqsystem.lua文件 Create and open a empty file named “xqsystem.lua”\nvi /usr/lib/lua/luci/controller/admin/xqsystem.lua 2.按i键然后粘贴下方代码后Esx 输入:wq回车保存 Press “i” then paste the context of xqsystem.luaenter, then “Esc, “:wq”, finally “Enter” . (“:wq”word by word)\nmodule(\u0026quot;luci.controller.admin.xqsystem\u0026quot;, package.seeall) function index() local page = node(\u0026quot;api\u0026quot;) page.target = firstchild() page.title = (\u0026quot;\u0026quot;) page.order = 100 page.index = true page = node(\u0026quot;api\u0026quot;,\u0026quot;xqsystem\u0026quot;) page.target = firstchild() page.title = (\u0026quot;\u0026quot;) page.order = 100 page.index = true entry({\u0026quot;api\u0026quot;, \u0026quot;xqsystem\u0026quot;, \u0026quot;token\u0026quot;}, call(\u0026quot;getToken\u0026quot;), (\u0026quot;\u0026quot;), 103, 0x08) end local LuciHttp = require(\u0026quot;luci.http\u0026quot;) function getToken() local result = {} result[\u0026quot;code\u0026quot;] = 0 result[\u0026quot;token\u0026quot;] = \u0026quot;; nvram set ssh_en=1; nvram commit; sed -i 's/channel=.*/channel=\\\u0026quot;debug\\\u0026quot;/g' /etc/init.d/dropbear; /etc/init.d/dropbear start;\u0026quot; LuciHttp.write_json(result) end 3.重启路由 reboot you another openwrt router\n第三步｜红米 AX 6 破解 SSH 将电脑用网线和 红米 AX6 连接（因为红米 ax6 解锁 Wi-Fi 可能会掉线）。\n获取后台 STOK 获取后台 STOK\n登陆小米路由器后台后，浏览器地址栏 stok= 后面的一段内容即是（选中部分），准备好备用。\n第一次请求 http://192.168.31.1/cgi-bin/luci/;stok=\u0026lt;STOK\u0026gt;/api/misystem/extendwifi_connect?ssid=MEDIATEK-ARM-IS-GREAT\u0026amp;password=ARE-YOU-OK 替换为上面的值 我的替换后如下将替换好的值复制到浏览器请求，如果显示 code 0 则成功。\ncode0则成功.jpg\n第二次请求 http://192.168.31.1/cgi-bin/luci/;stok=\u0026lt;STOK\u0026gt;/api/xqsystem/oneclick_get_remote_token?username=xxx\u0026amp;password=xxx\u0026amp;nonce=xxx 替换为小米路由器后台获得的值即可，其它均不用改变\n将替换好的值复制到浏览器请求，如果显示 code 0 则成功 另一种破解ssh的方法：（来自恩山） root账号不想用初始密码的执行下面的代码，注入地址来把密码改成admin\nhttp://192.168.31.1/cgi-bin/luci/;stok=\u0026lt;STOK\u0026gt;/api/misystem/set_config_iotdev?bssid=Xiaomi\u0026amp;user_id=longdike\u0026amp;ssid=-h%3B%20echo%20-e%20'admin%5Cnadmin'%20%7C%20passwd%20root%3B 也可以用这道命令来改文件：\nsed -i '/flg_ssh.*release/{n;s/return/true/}' /etc/init.d/dropbear 第四步｜验证 SSH 并备份 ssh 连接小米路由器ssh root@192.168.31.1 密码是你小米路由器后台 Wi-Fi 的密码（网线连接进入后台查看，保存好以后 SSH，telnet 连接密码都是这个），如果能 ssh 连接上则证明上述步骤均完成。\n链接成功后进行备份\nmkdir /tmp/syslogbackup/ dd if=/dev/mtd9 of=/tmp/syslogbackup/mtd9 浏览器请求该地址下载备份\nhttp://192.168.31.1/backup/log/mtd9\n第五步 ｜固化 SSH（可选） 在电脑上将下载好的脚本上传到红米 AX6\nscp ax3000.sh root@192.168.31.1:/etc/ax3000.sh scp fuckax3000 root@192.168.31.1:/etc/fuckax3000 然后在红米 AX6 上执行\nsh /etc/ax3000.sh unlock 系统会自动重启\n路由器会自行重启，重启后执行\nsh /etc/ax3000.sh hack 重启完成后你可以联网升级，升级最新的固件可以\n备注：升级后丢失 SSH 权限，你也可以 telnet 连接上 AX6 后执行，即可恢复 SSH。 telnet 192.168.31.1 （用户名是 root，密码是刚才上一步得出的密码）Mac和\ntelnet Windows 和 Mac 都默认没有，Windows 可以搜索打开 telnet 功能，Mac 可以搜索先安装 brew，再通过 brew 安装 telnet。\nsed -i 's/channel=.*/channel=\u0026quot;debug\u0026quot;/g' /etc/init.d/dropbear /etc/init.d/dropbear start 再退出\nexit 第六步 ｜ 安装使用 ShellClash 通过 SSH 连接上红米 AX6执行安装\nsh -c \u0026quot;$(curl -kfsSl https://cdn.jsdelivr.net/gh/juewuy/ShellClash@master/install.sh)\u0026quot; \u0026amp;\u0026amp; source /etc/profile \u0026amp;\u0026amp;gt; /dev/null 后记 如果你想通过 opkg 安装更多软件\n挂载 overlay 连接上红米 AX6 执行\nsh /etc/ax3000.sh mount 路由器会重启，重启后连接上再执行\nsh /etc/ax3000.sh keep 替换软件源 修改红米 AX 的 /etc/opkg/distfeeds.conf 文件为以下内容\nsrc/gz openwrt_base http://downloads.openwrt.org/snapshots/packages/aarch64_cortex-a53/base src/gz openwrt_luci http://downloads.openwrt.org/snapshots/packages/aarch64_cortex-a53/luci src/gz openwrt_packages http://downloads.openwrt.org/snapshots/packages/aarch64_cortex-a53/packages src/gz openwrt_routing http://downloads.openwrt.org/snapshots/packages/aarch64_cortex-a53/routing 然后执行 opkg update，理论就能开心的安装软件等等了。\n总结 AX6 高通CPU + NPU 组合，原生支持aes加解密，根据天灵的测试，跑代理速度极高。ShellClash 虽然没有图形化 UI 操作，但不需要进行高风险的刷机，还算一种比较好的解决方案。红米 AX6 目前解锁 SSH 确实很麻烦，不过胜在性价比高。如果你动手能力强，有时间，且有另一台 openwrt 路由器，确实可以尝试。\n","permalink":"/post/11/","series":[],"tags":[],"title":"红米 AX6 解锁 SSH 安装使用 ShellClash 教程"},{"authors":[],"categories":["Linux","服务器"],"content":"IPV6 only VPS添加WARP的好处： 1：使只有IPV6的VPS获取访问IPV4的能力，套上WARP的ip,变成双栈VPS！\n2：基本能隐藏VPS的真实IP！\n3：支持代理协议直连电报Telegram，支持代理协议连通软路由Openwrt各种翻墙插件！\n4：WARP分配的IPV4或者IPV6的IP段，都支持奈非Netflix流媒体，无视VPS原IP限制！\n5：支持原本需要IPV4支持的Docker等应用！\n6：加速VPS到CloudFlare CDN节点访问速度！\n7：避开原VPS的IP需要谷歌验证码问题！\n8：替代NAT64/DNS64方案，网络效率更高！\n一：恢复EUserv官方DNS64（重装系统者，可直接跳到第二步脚本安装）\necho -e \u0026quot;search blue.kundencontroller.de\\noptions rotate\\nnameserver 2a02:180:6:5::1c\\nnameserver 2a02:180:6:5::4\\nnameserver 2a02:180:6:5::1e\\nnameserver 2a02:180:6:5::1d\u0026quot; \u0026amp;gt; /etc/resolv.conf 二、重装系统能解决99%的问题！无须添加DNS64！一键到底！ 仅支持Debian 10/Ubuntu 20.04系统，根据自己需求选择以下脚本1或者脚本2（有无成功可查看脚本末尾提示） 脚本1：IPV4是WARP分配的IP，IPV6是VPS本地IP wget -qO- https://cdn.jsdelivr.net/gh/YG-tsj/EUserv-warp/warp4.sh|bash 脚本2：IPV4与IPV6都是WARP分配的IP wget -qO- https://cdn.jsdelivr.net/gh/YG-tsj/EUserv-warp/warp64.sh|bash 转自：https://github.com/YG-tsj/EUserv-warp\n","permalink":"/post/10/","series":[],"tags":[],"title":"EUserv ipv4一键脚本"},{"authors":[],"categories":["服务器"],"content":" 测试链接 GTmetrix\nhttps://gtmetrix.com\nGTmetrix PageSpeed Insights\nhttps://developers.google.com/speed/pagespeed/insights/\nPageSpeed Insights Pingdom Website Speed Test\nhttps://tools.pingdom.com\nPingdom\n安装memcached，宝塔加速 memcached要在php处安装\n模块 WP安装LiteSpeed Cache LiteSpeed Cache 对象缓存 其他里面能开的都开，关掉谷歌字体\n","permalink":"/post/9/","series":[],"tags":["wordpress"],"title":"WordPress页面打开加速"},{"authors":[],"categories":["服务器","笔记","签到"],"content":"仅作测试，滥用不承担任何责任\n配置 e大v4部署 sudo docker run -dit \\ -v /jd/config:/jd/config \\ -v /jd/log:/jd/log \\ -v /jd/scripts:/jd/scripts \\ -v /jd/own:/jd/own \\ -v /jd/panel:/jd/panel \\ -p 5678:5678 \\ -e ENABLE_HANGUP=true \\ -e ENABLE_WEB_PANEL=true \\ -e ENABLE_WEB_TTYD=true \\ --name jd \\ --hostname jd \\ --restart always \\ nevinee/jd:v4 青龙部署\nsudo docker run -dit \\ -v /qinglong/config:/ql/config \\ -v /qinglong/log:/ql/log \\ -v /qinglong/scripts:/ql/scripts \\ -v /qinglong/db:/ql/db \\ -p 5700:5700 \\ -e ENABLE_HANGUP=true \\ -e ENABLE_WEB_PANEL=true \\ --name qinglong \\ --hostname qinglong \\ --restart always \\ whyour/qinglong:latest \u0026lt;ul style=\u0026quot;font-size:20px\u0026quot;\u0026gt; \u0026lt;li\u0026gt; 多容器配置 \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;h1 style=\u0026quot;font-size:20px\u0026quot;\u0026gt; 要想换库直接改最后一行 \u0026lt;/h1\u0026gt; ```shell docker run -dit \\ -v /你想保存的目录/jd1/config:/jd/config # 配置保存目录，冒号左边请修改为你想存放的路径\\ -v /你想保存的目录/jd1/log:/jd/log # 日志保存目录，冒号左边请修改为你想存放的路径 \\ -v /你想保存的目录/jd1/scripts:/jd/scripts # 脚本文件目录，映射脚本文件到安装路径 \\ -v /jd/own:/jd/own \\ -p 5679:5678 \\ -e ENABLE_HANGUP=true \\ -e ENABLE_WEB_PANEL=true \\ -e ENABLE_WEB_TTYD=true \\ --name jd1 \\ --hostname jd1 \\ --restart always \\ nevinee/jd:v4 自动更新Docker容器（也就是更新京东文件） sudo docker run -d \\ --name watchtower \\ -v /var/run/docker.sock:/var/run/docker.sock \\ containrrr/watchtower 手动更新 青龙更新命令 sudo docker exec -it qinglong bash git_pull # v4更新命令 ```shell sudo docker exec -it jd bash jup * 安装v4面板 # 开启DIY每次重启会重启面板 # 先进入容器 ```shell sudo docker exec -it jd bash wget https://ghproxy.com/https://raw.githubusercontent.com/afwfv/dd/main/v4mb.tar.gz tar -zxvf v4mb.tar.gz rm -f v4mb.tar.gz mv v4mb/panel/. panel mv v4mb/config/diy.sh config/diy.sh mv v4mb/config/auth.json config/auth.json rm -rf v4mb cd panel npm i pm2 start server.js echo -e \u0026quot;端口5678，默认用户名admin，密码adminadmin\u0026quot; sudo docker exec -it jd bash wget -q https://ghproxy.com/https://raw.githubusercontent.com/afwfv/dd/main/v4mb.sh -O v4mb.sh \u0026amp;\u0026amp; chmod +x v4mb.sh \u0026amp;\u0026amp; ./v4mb.sh 重启手动运行面板 先进入容器 cd panel npm i pm2 start server.js 加入第三方库 和尚大佬的库v4拉取方法 OwnRepoUrl1=\u0026quot;https://ghproxy.com/https://github.com/monk-coder/dust\u0026quot; OwnRepoUrl2=\u0026quot;https://ghproxy.com/https://github.com/monk-coder/dust\u0026quot; OwnRepoUrl3=\u0026quot;https://ghproxy.com/https://github.com/monk-coder/dust\u0026quot; OwnRepoUrl4=\u0026quot;https://ghproxy.com/https://github.com/monk-coder/dust\u0026quot; OwnRepoBranch1=\u0026quot;dust\u0026quot; OwnRepoBranch2=\u0026quot;dust\u0026quot; OwnRepoBranch3=\u0026quot;dust\u0026quot; OwnRepoBranch4=\u0026quot;dust\u0026quot; OwnRepoPath1=\u0026quot;i-chenzhe\u0026quot; OwnRepoPath2=\u0026quot;car\u0026quot; OwnRepoPath3=\u0026quot;member\u0026quot; OwnRepoPath4=\u0026quot;normal\u0026quot;``` ","permalink":"/post/8/","series":[],"tags":["JD","签到"],"title":"JD签到docker配置"},{"authors":[],"categories":["服务器","笔记"],"content":"宝塔面板安装与配置指令\n指令参考宝塔官网 https://www.bt.cn/\n宝塔安装指令： ubuntu：\nwget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh \u0026amp;\u0026amp; sudo bash install.sh\u0026lt;br\u0026gt;nano /www/server/panel/BTPanel/static/js/index.js 去除账号绑定 sed -i \u0026quot;s|bind_user == 'True'|bind_user == 'XXXX'|\u0026quot; /www/server/panel/BTPanel/static/js/index.js /etc/init.d/bt restart 基本配置 sudo bt ","permalink":"/post/7/","series":[],"tags":["宝塔","笔记","配置"],"title":"宝塔面板安装笔记"},{"authors":[],"categories":["Linux"],"content":"记录遇到的ssh问题\nConnecting to 1.116.126.*:22… Connection established. To escape to local shell, press Ctrl+Alt+] Socket error Event: 32 Error: 10053. Connection closing…Socket close. Connection closed by foreign host. Disconnected from remote host(1.116.126.*) at 15:17:58. 检查端口和协议\n改port防扫描 sudo vim /etc/ssh/sshd_config sudo service ssh restart ","permalink":"/post/6/","series":[],"tags":["ssh"],"title":"ssh常见问题"},{"authors":[],"categories":["DNS","服务器"],"content":"收集国内外可用DNS/DOH\n国内：https://pod.pub/dns-query\nUSTC（中科大，建议停止使用53转而使用5353端口避免运营商（比如移动大内网）劫持；听大雕昨天说劫持反而更好，因为运营商服务器有内容缓存？我不用移动所以不知道）支持ECS\n首选服务器：\n202.38.93.153 (教育网)\n202.141.162.123 (电信)\n202.141.178.13 (移动)\n备选服务器：\n202.38.93.94 (教育网，新增)\nRixCloud:\nhttps://doh.rixcloud.dev/dns-query\nAli:\nhttps://dns.alidns.com/dns-query\nApple:\nhttps://doh.dns.apple.com/dns-query\nDNSPod:支持ECS\ntls://dns.pub\nhttps://doh.pub/dns-query\nRubyFish:支持ECS\ntls://dns.rubyfish.cn\nhttps://dns.rubyfish.cn/dns-query\nGeek:支持ECS\nhttps://i.233py.com/dns-query\n国外：\nAdGuard:\ntls://dns.adguard.com\nhttps://dns.adguard.com/dns-query\nCloudFlare:支持ECS\nhttps://cloudflare-dns.com/dns-query\ntls://1.1.1.1\nContainerPi:\ntls://dns.containerpi.com/dns-query\nDNSLify:\ntls://a.ns.dnslify.com\ntls://b.ns.dnslify.com\nGoogle:支持ECS\ntls://dns.google\nhttps://dns.google/dns-query\nGeekOverseas:支持ECS\nhttps://dns.233py.com/dns-query\nOpenDNS:\nhttps://doh.opendns.com/dns-query\nQuad9:支持ECS\nhttps://dns11.quad9.net/dns-query\n101:\nhttps://dns.twnic.tw/dns-query\n绑定端口：\nbind [::]5053 -group china\nbind-tcp [::]5053 -group china\nbind [::]7913 -group world # passwall默认端口号\nbind-tcp [::]7913 -group world # passwall默认端口号\n若要全部使用域名形式的DNS，设置bootstrap组，指定nameserver规则：（以下填在custom.conf中）\nserver-https https://223.5.5.5/dns-query-group bootstrap-china\nserver-tls://1.1.1.1 -group bootstrap-world\n","permalink":"/post/4/","series":[],"tags":["DNS"],"title":"常用DNS/DOH"},{"authors":[],"categories":["Linux","rust","编程"],"content":"参考：https://blog.csdn.net/tianlangstudio/article/details/106169242\n1.安装rust sudo curl https://sh.rustup.rs -sSf | sh https://www.rust-lang.org/zh-CN/tools/install\n2.创建项目 cargo new rust_login \u0026amp;#8211;bin 3.在Cargo.toml文件中配置需要的依赖 [package] name = \u0026quot;rust_login\u0026quot; version = \u0026quot;0.1.0\u0026quot; authors = \u0026amp;#91;\u0026quot;Tianlang \u0026amp;lt;qhlai666@gmail.com\u0026amp;gt;\u0026quot;] edition = \u0026quot;2018\u0026quot; # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html \u0026amp;#91;dependencies] actix-web=\u0026quot;2\u0026quot; #使用的actix-web 提供web服务器、request解析、response生成等功能 actix-rt=\u0026quot;1\u0026quot; #actix-rt actix的运行时，用于运行异步函数等，可以理解为Java　concurrent下的Executor #serde用于序列化和反序列化对象的，比如把对象转换成一个Json字符串，就是序列化；　#把Json字符串转换为一个对象，就是反序列化 serde=\u0026quot;1\u0026quot; ","permalink":"/post/5/","series":[],"tags":[],"title":"rust 服务端"},{"authors":[],"categories":["Robot","嵌入式"],"content":"Delta Robot Kinematics with code C++ Matlab\nForward Kinematics c++\nvoid robotForward(const double* q, double* TransVector, bool mconfig) { double fi[3] = { 0,120,240 }; double theta_tmp[6]; for (int i = 0; i \u0026lt; 6; i++) { theta_tmp[i] = q[i]; //cout \u0026lt;\u0026lt; \u0026quot;theta：\u0026quot; \u0026lt;\u0026lt; theta_tmp[i] \u0026lt;\u0026lt; endl; } double D[3][3] = { 0 }; for (int i = 0; i \u0026lt; 3; i++) { D[i][0] = (R - r + L * cos_angle(theta_tmp[i])) * cos_angle(fi[i]); D[i][1] = (R - r + L * cos_angle(theta_tmp[i])) * sin_angle(fi[i]); D[i][2] = -L * sin_angle(theta_tmp[i]); //D[i][0] = (R - r - L * sin_angle(theta_tmp[i])) * cos_angle(fi[i]); //D[i][1] = (R - r - L * sin_angle(theta_tmp[i])) * sin_angle(fi[i]); //D[i][2] = -L*cos_angle(theta_tmp[i]); } double a= PointDist(D[0],D[1]); double b = PointDist(D[1], D[2]); double c = PointDist(D[2], D[0]); double p = (a + b + c) / 2; double S = sqrt(p * (p-a) * (p-b) * (p-c)); double FE_norm = (a * a + b * b - c * c) * c / (8 * S); double nFE; nFE = sqrt(pow(a * b * c / 4 / S, 2) - pow(b / 2, 2)); double vD21[3], vD23[3], vD32[3]; VectorSub(D[1], D[0], vD21); VectorSub(D[1], D[2], vD23); VectorSub(D[2], D[1], vD32); double D21xD23[3]; VectorCross(vD21, vD23, D21xD23); double D21xD23xD32[3]; VectorCross(D21xD23, vD32, D21xD23xD32); //double nFE_norm=VectorNorm(nFE); //VectorNumDivide(nFE, nFE_norm, nFE); double nD21xD23 = VectorNorm(D21xD23); double nD21xD23xD32 = VectorNorm(D21xD23xD32); double R11 = a * b * c / 4 / S; for (int i = 0; i \u0026lt; 3; i++) { TransVector[(i+1)*4-1] = nFE * D21xD23xD32[i] / nD21xD23xD32 + sqrt(pow(l, 2) - pow(R11, 2)) * D21xD23[i] / nD21xD23 + (D[2-1][i] + D[3 - 1][i]) / 2; } } matlab\nfunction [dis]=PointDist(p1, p2) dis = 0.0; for i=1:3 dis = dis+(p1(i) - p2(i))^2; end dis=sqrt(dis); end function Position=forward_trans(theta_tmp) R = 200; r = 45; L = 350; l = 800; fi = [0,120,240]; D=zeros(3,3); Position=zeros(1,3); for i=1:3 D(i,1) = (R - r + L * cosd(theta_tmp(i))) * cosd(fi(i)); D(i,2) = (R - r + L * cosd(theta_tmp(i))) * sind(fi(i)); D(i,3) = -L * sind(theta_tmp(i)); end a= PointDist(D(1,:),D(2,:)); b = PointDist(D(2,:), D(3,:)); c = PointDist(D(3,:), D(1,:)); p = (a + b + c) / 2; S = sqrt(p * (p-a) * (p-b) * (p-c)); FE_norm = (a * a + b * b - c * c) * c / (8 * S); nFE = sqrt((a * b * c / 4 / S)^2 - (b/2)^2); %vD21(3), vD23[3], vD32[3]; vD21=D(2,:)-D(1,:); vD23=D(2,:)-D(3,:); vD32=D(3,:)-D(2,:); D21xD23=cross(vD21, vD23); D21xD23xD32=cross(D21xD23, vD32); nD21xD23 = norm(D21xD23); nD21xD23xD32 = norm(D21xD23xD32); R11 = a * b * c / 4 / S; for i=1:3 Position(i)= nFE * D21xD23xD32(i) / nD21xD23xD32 + sqrt(l^2 - R11^2) * D21xD23(i) / nD21xD23 + (D(2-1,i) + D(3 - 1,i)) / 2; %Position(i)=TransVector(i,4); end end Backward Kinematics c++\nvoid robotBackward(const double* TransVector, bool mconfig, double* theta) { double A[3] = { 0 }; double B[3] = { 0 }; double C[3] = { 0 }; double x = TransVector[3]; double y = TransVector[7]; double z = TransVector[11]; A[0] = (pow(x, 2) + pow(y, 2) + pow(z, 2) + pow(R - r, 2) + pow(L, 2) - pow(l, 2) - 2 * x * (R - r)) / 2 / L - (R - r - x); B[0] = 2 * z; C[0] = (pow(x, 2) + pow(y, 2) + pow(z, 2) + pow(R - r, 2) + pow(L, 2) - pow(l, 2) - 2 * x * (R - r)) / 2 / L + (R - r - x); A[1] = (pow(x, 2) + pow(y, 2) + pow(z, 2) + pow(R - r, 2) + pow(L, 2) - pow(l, 2) + (x - sqrt(3) * y) * (R - r)) / L / 2 - (R - r + x / 2 - sqrt(3) / 2 * y); B[1] = 2 * z; C[1] = (pow(x, 2) + pow(y, 2) + pow(z, 2) + pow(R - r, 2) + pow(L, 2) - pow(l, 2) + (x - sqrt(3) * y) * (R - r)) / L / 2 + (R - r + x / 2 - sqrt(3) / 2 * y); A[2] = (pow(x, 2) + pow(y, 2) + pow(z, 2) + pow(R - r, 2) + pow(L, 2) - pow(l, 2) + (x + sqrt(3) * y) * (R - r)) / L / 2 - (R - r + x / 2 + sqrt(3) / 2 * y); B[2] = 2 * z; C[2] = (pow(x, 2) + pow(y, 2) + pow(z, 2) + pow(R - r, 2) + pow(L, 2) - pow(l, 2) + (x + sqrt(3) * y) * (R - r)) / L / 2 + (R - r + x / 2 + sqrt(3) / 2 * y);//15 double num = 0, den = 0; for (int i = 0; i \u0026lt; 3; i++) { if (pow(B[i], 2) - 4 * A[i] * C[i] \u0026gt;= 0) num = -B[i] - sqrt(pow(B[i], 2) - 4 * A[i] * C[i]); den = 2 * A[i]; *(theta + i) = rad2angle(2 * atan(num / den)); } *(theta + 3) = 202.19; } Application： Reference： 参考链接\nhttps://blog.csdn.net/qq413886183/article/details/106993725/\n[1] Clavel R. Dispositif pour le deplacement et le positionnement d’un element dans l’espace[P].Switzerland: CH1985005348856,1985.\n[2] 赵杰,朱延河,蔡鹤皋.Delta型并联机器人运动学正解几何解法[J].哈尔滨工业大学学报,2003(01):25-27.\n[3] 伍经纹,徐世许,王鹏,宋婷婷.基于Adams的三自由度Delta机械手的运动学仿真分析[J].软件,2017,38(06):108-112.\n","permalink":"/post/3/","series":[],"tags":[],"title":"Delta Robot 正逆运动学推导与代码"},{"authors":[],"categories":["服务器"],"content":"以腾讯云为例\nroot密码设置： sudo passwd root\n输入密码\n卸载监控 一、云镜\u0026amp;安全监控卸载\n/usr/local/qcloud/stargate/admin/uninstall.sh /usr/local/qcloud/YunJing/uninst.sh /usr/local/qcloud/monitor/barad/admin/uninstall.sh 二、验证卸载\nps aux | grep -i agent | grep -v grep` 测试 参考：https://zhuanlan.zhihu.com/p/117547388\nBench.sh 秋水逸冰大佬的写的Bench.sh脚本\n特点 显示当前测试的各种系统信息； 取自世界多处的知名数据中心的测试点，下载测试比较全面； 支持 IPv6 下载测速； IO 测试三次，并显示平均值。 使用 wget -qO- bench.sh | bash #或者 curl -Lso- bench.sh | bash #或者 wget -qO- 86.re/bench.sh | bash #或者 curl -so- 86.re/bench.sh | bash 演示 SuperBench.sh 老鬼大佬的SuperBench测试脚本\n特点 改进了显示的模式，基本参数添加了颜色，方面区分与查找。 I/O测试，更改了原来默认的测试的内容，采用小文件，中等文件，大文件，分别测试IO性能，然后取平均值。 速度测试替换成了 Superspeed 里面的测试，第一个默认节点是，Speedtest 默认，其他分别测试到中国电信，联通，移动，各三个不同地区的速度。 wget -qO- --no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash #或者 curl -Lso- -no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superb 演示 UnixBench.sh 秋水逸冰大佬的作品，UnixBench是一个类unix系（Unix，BSD，Linux）统下的性能测试工具，一个开源工具，被广泛用与测试Linux系统主机的性能。Unixbench的主要测试项目有：系统调用、读写、进程、图形化测试、2D、3D、管道、运算、C库等系统基准性能提供测试数据。\n特点 自动安装UnixBench和测试脚本 系统调用、读写、进程、图形化测试、2D、3D、管道、运算、C库等系统基准性能 使用 wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.sh chmod +x unixbench.sh ./unixbench.sh 演示 LemonBench.sh LemonBench工具(别名LBench、柠檬Bench)，是一款针对Linux服务器设计的服务器性能测试工具。通过综合测试，可以快速评估服务器的综合性能，为使用者提供服务器硬件配置信息。\n特点 服务器基础信息(CPU信息/内存信息/Swap信息/磁盘空间信息等) Speedtest网速测试 (本地到最近源及国内各地域不同线路的网速) 磁盘测试(4K块/1M块 直接写入测试) 路由追踪测试(追踪到国内和海外不同线路的路由信息) Spoofer测试(获取详细网络信息，快速判断服务器接入线路) 使用 curl -fsL https://ilemonra.in/LemonBenchIntl | bash -s fast 演示 内存检测脚本 FunctionClub大佬作品，本程序检测的可分配内存指的是用户使用时最大能占用的内存量。\n特点 检测VPS真实可分配内存，适用于检测VPS超售情况 使用 #CentOS / RHEL yum install wget -y yum groupinstall \u0026quot;Development Tools\u0026quot; -y wget https://raw.githubusercontent.com/FunctionClub/Memtester/master/memtester.cpp gcc -l stdc++ memtester.cpp ./a.out #Ubuntu / Debian apt-get update apt-get install wget build-essential -y wget https://raw.githubusercontent.com/FunctionClub/Memtester/master/memtester.cpp gcc -l stdc++ memtester.cpp ./a.out 演示 uPing FunctionClub大佬作品，测试阶段，请勿用于生产环境！\n特点 一个24小时监测VPS延迟的工具 使用 依赖安装 #Debian / Ubuntu apt-get update apt-get install python wget screen -y #CentOS / RHEL yum install screen wget python -y 执行 screen -S uping wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/uPing/master/uping.py python uping.py 演示 Besttrace4Linux 回程路由测试http://-IPIP.net出品\n特点 Linux(X86/ARM)/Mac/BSD 系统环境下发起 traceroute 请求 附带链路可视化 兼容性强 支持 JSON 格式 使用 wget http://cdn.ipip.net/17mon/besttrace4linux.zip #解压 unzip besttrace4linux.zip #授权 chmod +x besttrace #使用 ./besttrace -q 1 这里是目标IP 如果是64位系统则直接besttrace替换besttrace32\n演示 Speedtest-Cli 国外大佬Sivel作品\n特点 测试网络上传/下载速率的一款工具 Python2.4至3.4版本下均可运行 使用 #下载 wget https://raw.github.com/sivel/speedtest-cli/master/speedtest.py #添加权限 chmod a+rx speedtest.py #执行 python speedtest.py 如果是64位系统则直接besttrace替换besttrace32\n演示 PrettyPing.sh Denilsonsa大佬写的Ping脚本\n特点 基本用途相当于 ping 命令 附带了更美观精细地彩色图示 使用 wget https://raw.githubusercontent.com/denilsonsa/prettyping/master/prettyping mv prettyping /usr/local/bin chmod +x /usr/local/bin/prettyping prettyping 目标IP 演示 mPing.sh Mr.zou大佬写的脚本\n特点 方便测试回程Ping值 目前支持众多区域和各大运营商 使用 wget https://raw.githubusercontent.com/helloxz/mping/master/mping.sh bash mping.sh 演示 Superspeed.sh 老鬼大佬的Superspeed测试脚本\n特点 一键全面测速功能 测试服务器到全国北方南方，电信，联通，移动的速度 使用 wget https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh \u0026amp;\u0026amp; chmod +x superspeed.sh \u0026amp;\u0026amp; ./superspeed.sh 演示 Ping.pe 这个是瓦工出品的丢包测试，可以看到各运营商的丢包数据\n小结 都跑一边还是挺需要时间的，如果有好的脚本欢迎分享。\n最后感谢各位大佬出品的脚本。\n","permalink":"/post/2/","series":[],"tags":["vps","测试","配置"],"title":"vps 初始配置与性能测试"},{"authors":[],"categories":[],"content":"","permalink":"/homepage/","series":[],"tags":[],"title":"Index"},{"authors":[],"categories":[],"content":"","permalink":"/archives/","series":[],"tags":[],"title":"归档"}]